import java.io.*;
import java.util.*;

public class _1149_RGBDistance2 {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int N = Integer.parseInt(br.readLine());
        int[][] costs = new int[N+1][3];
        int[] dp = new int[1001];

        // i-2번째 색상
        boolean wasRed = false;
        boolean wasGreen = false;
        boolean wasBlue = false;

        for (int i = 1; i < N+1; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            int costOfRed = Integer.parseInt(st.nextToken());
            int costOfGreen = Integer.parseInt(st.nextToken());
            int costOfBlue = Integer.parseInt(st.nextToken());

            costs[i][0] = costOfRed;
            costs[i][1] = costOfGreen;
            costs[i][2] = costOfBlue;

            if(i == 1) { // 첫 번째 집
                dp[i] = Math.min(Math.min(costOfRed, costOfGreen), costOfBlue);
                System.out.println(dp[i]);
                continue;
            }

            // cost가 같은 색상이 존재할 때 처리가 안됌.

            if(i == 2) { // 두 번째 집
                /*
                가능한 조합
                costs[i-1][0] + costs[i][1]
                costs[i-1][0] + costs[i][2]
                costs[i-1][1] + costs[i][0]
                costs[i-1][1] + costs[i][2]
                costs[i-1][2] + costs[i][0]
                costs[i-1][2] + costs[i][1]
                 */
                int minimumCost = Math.min(Math.min(Math.min(Math.min(Math.min(costs[i-1][0] + costs[i][1], costs[i-1][0] + costs[i][2]),
                        costs[i-1][1] + costs[i][0]),
                        costs[i-1][1] + costs[i][2]),
                        costs[i-1][2] + costs[i][0]),
                        costs[i-1][2] + costs[i][1]);
                dp[i] = minimumCost;
                if (costs[i-1][0] + costs[i][1] == minimumCost || costs[i-1][0] + costs[i][2] == minimumCost) {
                    wasRed = true;
                } else if(costs[i-1][1] + costs[i][0] == minimumCost || costs[i-1][1] + costs[i][2] == minimumCost) {
                    wasGreen = true;
                } else {
                    wasBlue = true;
                }
                System.out.println(dp[i]);
                continue;
            }


            if (wasRed) {
                int min = Math.min(Math.min(Math.min(costs[i-1][1] + costs[i][0], costs[i-1][1] + costs[i][2]), costs[i-1][2] + costs[i][0]), costs[i-1][2] + costs[i][1]);
                dp[i] = dp[i-2] + min;
                if (costs[i-1][1] + costs[i][0] == min || costs[i-1][1] + costs[i][2] == min) {
                    wasGreen = true;
                    wasRed = false;
                } else {
                    wasBlue = true;
                    wasRed = false;
                }
            } else if (wasGreen) {
                int min = Math.min(Math.min(Math.min(costs[i-1][0] + costs[i][1], costs[i-1][0] + costs[i][2]), costs[i-1][2] + costs[i][0]), costs[i-1][2] + costs[i][1]);
                dp[i] = dp[i-2] + min;
                if (costs[i-1][0] + costs[i][1] == min || costs[i-1][0] + costs[i][2] == min) {
                    wasRed = true;
                    wasGreen = false;
                } else {
                    wasBlue = true;
                    wasGreen = false;
                }
            } else {
                int min = Math.min(Math.min(Math.min(costs[i-1][0] + costs[i][1], costs[i-1][0] + costs[i][2]), costs[i-1][1] + costs[i][0]), costs[i-1][1] + costs[i][2]);
                dp[i] = dp[i-2] + min;
                if (costs[i-1][0] + costs[i][1] == min || costs[i-1][0] + costs[i][2] == min) {
                    wasRed = true;
                    wasBlue = false;
                } else {
                    wasGreen = true;
                    wasBlue = false;
                }
            }
            System.out.println(dp[i]);
        }
